import clientPromise from "../lib/mongodb";
import { ObjectId } from "mongodb";

export default async function handler(req, res) {
    if (req.method !== "POST") {
        return res.status(405).json({ error: "Méthode non autorisée" });
    }

    const { userId, score } = req.body;

    // Vérification des données reçues
    if (!userId || score == null) {
        return res.status(400).json({
            error: "Champs manquants : userId ou score est requis",
        });
    }

    try {
        const client = await clientPromise;
        const db = client.db("geoguessr_clone");

        // Convertir userId en ObjectId
        let objectId;
        try {
            objectId = new ObjectId(userId);
        } catch (error) {
            return res.status(400).json({ error: "ID utilisateur invalide" });
        }

        // Récupérer l'utilisateur
        const user = await db.collection("users").findOne({ _id: objectId });

        if (!user) {
            return res.status(404).json({ error: "Utilisateur non trouvé" });
        }

        // Ajouter le score à l'expérience
        const newExperience = user.experience + score;

        // Calculer le nouveau niveau
        const newLevel = Math.floor(newExperience / 50000) + 1;

        // Mettre à jour la base de données
        await db.collection("users").updateOne(
            { _id: objectId },
            {
                $set: {
                    experience: newExperience,
                    level: newLevel,
                    lastscore: score,
                },
            }
        );

        res.status(200).json({
            message: "Expérience et niveau mis à jour avec succès",
            newExperience,
            newLevel,
        });
    } catch (error) {
        console.error("Erreur lors de la mise à jour de l'expérience :", error);
        res.status(500).json({ error: "Erreur interne du serveur" });
    }
}
